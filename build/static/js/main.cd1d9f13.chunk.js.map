{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newNote","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","Notification","map","find","changedNote","updatedNote","catch","error","setTimeout","toToggleImportance","onSubmit","event","preventDefault","noteToAdd","date","Date","Math","random","addedNote","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4LAEMA,EAAU,YAkBD,EAhBA,WAGX,OAFgBC,IAAMC,IAAIF,GAEXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCL9BK,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACQ,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCGrCK,EAVM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAGJ,qBAAKJ,UAAU,QAAf,SACFI,KCAHC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GA2FSC,EAtFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAC1B,iBAHU,mBAEPpB,EAFO,KAEEuB,EAFF,OAKgBH,oBAAS,GALzB,mBAKPI,EALO,KAKEC,EALF,OAM0BL,mBAAS,MANnC,mBAMPM,EANO,KAMOC,EANP,KAQRC,EAAcJ,EAAUH,EAAQA,EAAMQ,QAAO,SAAAxB,GAAI,OAAIA,EAAKG,aAEhEsB,qBAAU,WACRC,IAEGlC,MAAK,SAAAmC,GACJV,EAASU,QAEZ,IA8CH,OACE,gCACE,uCACA,cAACC,EAAD,CAAcpB,QAASa,IACvB,8BACI,yBAAQf,QAAS,kBAAMc,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACGI,EAAYM,KAAI,SAAA7B,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBA/BtD,SAACJ,GAC1B,IAAMG,EAAOgB,EAAMc,MAAK,SAAA9B,GAAI,OAAIA,EAAKH,KAAOA,KACtCkC,EAAW,2BAAO/B,GAAP,IAAaG,WAAYH,EAAKG,YAE/CuB,EACU7B,EAAIkC,GACXvC,MAAK,SAAAwC,GACJf,EAASD,EAAMa,KAAI,SAAA7B,GAAI,OAAIA,EAAKH,KAAOmC,EAAYnC,GAAKmC,EAAchC,SAEvEiC,OAAM,SAAAC,GACLZ,EAAgB,YAAD,OACDtB,EAAKK,QADJ,yCAGf8B,YAAW,WACTb,EAAgB,QACf,KACHL,EAASD,EAAMQ,QAAO,SAAAxB,GAAI,OAAIA,EAAKH,KAAOA,SAeuCuC,CAAmBpC,EAAKH,MAArEG,EAAKH,SAE3C,uBAAMwC,SAvDM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAY,CACdnC,QAASV,EACT8C,KAAM,IAAIC,KACVvC,UAAWwC,KAAKC,SAAW,IAK/BlB,EACUc,GACPhD,MAAK,SAAAqD,GACN5B,EAASD,EAAM8B,OAAOD,IACtB3B,EAAW,QAyCb,UACI,uBACI6B,MAAOpD,EACPqD,SAxCa,SAACV,GACxBpB,EAAWoB,EAAMW,OAAOF,UAyClB,wBAAQG,KAAK,SAAb,qBAEN,cAAC,EAAD,Q,MC/FNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.cd1d9f13.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = 'api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newNote => {\r\n    const request = axios.post(baseUrl, newNote);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newNote) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newNote);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n            <li className=\"note\">\r\n                {note.content}\r\n                <button onClick={toggleImportance}>{label}</button>\r\n            </li>\r\n            )\r\n}\r\n\r\nexport default Note;","const notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    \r\n    return <div className=\"error\">\r\n        {message}\r\n    </div>\r\n}\r\n\r\nexport default notification;","import React, { useState, useEffect } from 'react';\r\nimport noteService from './services/notes';\r\n\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification';\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState(\r\n        'a new note...'\r\n      );\r\n    const [showAll, setShowAll] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n\r\n    useEffect(() => {\r\n      noteService\r\n        .getAll()\r\n        .then(initialNotes => {\r\n          setNotes(initialNotes)\r\n        })\r\n    }, [])\r\n\r\n    \r\n    const addNote = (event) => {\r\n        event.preventDefault();\r\n        const noteToAdd = {\r\n            content: newNote,\r\n            date: new Date(),\r\n            important: Math.random() < 0.5\r\n        }\r\n        // setNotes([...notes, noteToAdd]);\r\n        // setNewNote('');\r\n\r\n        noteService\r\n          .create(noteToAdd)\r\n          .then(addedNote => {\r\n          setNotes(notes.concat(addedNote));\r\n          setNewNote('');\r\n        })\r\n      }\r\n\r\n    const handleNoteChange = (event) => {\r\n      setNewNote(event.target.value);\r\n    }\r\n\r\n    const toToggleImportance = (id) => {\r\n      const note = notes.find(note => note.id === id);\r\n      const changedNote = {...note, important: !note.important}\r\n      \r\n      noteService\r\n        .update(id, changedNote)\r\n        .then(updatedNote => {\r\n          setNotes(notes.map(note => note.id === updatedNote.id ? updatedNote : note))\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(\r\n            `The note ${note.content} was already deleted from the server`\r\n          )\r\n          setTimeout(() => {\r\n            setErrorMessage(null);\r\n          }, 5000);\r\n          setNotes(notes.filter(note => note.id !== id))\r\n        })\r\n      \r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage} />\r\n        <div>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n                show {showAll ? 'important' : 'all' }\r\n            </button>\r\n      </div>\r\n        <ul>\r\n          {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toToggleImportance(note.id)} />)}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n            <input \r\n                value={newNote}\r\n                onChange={handleNoteChange}\r\n            />\r\n            <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n      </div>\r\n    )\r\n  }\r\n  \r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App';\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}